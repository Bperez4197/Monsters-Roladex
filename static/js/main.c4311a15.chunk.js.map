{"version":3,"sources":["Components/card/card.component.jsx","Components/card-list/card-list.component.jsx","Components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","event","setState","searchField","target","value","state","fetch","then","response","json","users","catch","error","console","log","message","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAIaA,EAAO,SAACC,GAAD,OAClB,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAI,iBACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEL,6BAAKL,EAAMI,QAAQE,OACnB,kCAAKN,EAAMI,QAAQG,aCPVC,EAAW,SAACR,GACvB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAACN,GAAD,OAClB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCJdM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,uBACEZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCgDCG,G,wDAnDb,aAAe,IAAD,8BACZ,gBAmBFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAlB1C,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALH,E,qDAYd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAET,SAAUkB,OAC1CC,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,EAAMG,c,oBAaxC,WAAS,MAE2BC,KAAKX,MAA/Bb,EAFD,EAECA,SAAUU,EAFX,EAEWA,YACZe,EAAmBzB,EAAS0B,QAAO,SAAC/B,GAAD,OACvCA,EAAQE,KAAK8B,cAAcC,SAASlB,EAAYiB,kBAElD,OACE,sBAAKnC,UAAU,MAAf,UAGE,kDACA,cAAC,EAAD,CACEW,YAAY,iBACZC,aAAcoB,KAAKpB,eAGrB,cAAC,EAAD,CAAUJ,SAAUyB,W,GA9CVI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c4311a15.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./card.styles.css\";\r\n\r\nexport const Card = (props) => (\r\n  <div className=\"card-container\">\r\n    <img\r\n      alt=\"Monster Selfie\"\r\n      src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n    />\r\n    <h2>{props.monster.name}</h2>\r\n    <p> {props.monster.email}</p>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport \"./card-list.styles.css\";\r\nimport { Card } from \"../card/card.component\";\r\n\r\nexport const CardList = (props) => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {props.monsters.map((monster) => (\r\n        <Card key={monster.id} monster={monster} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport \"./search-box.styles.css\";\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n  <input\r\n    className=\"search\"\r\n    type=\"search\"\r\n    placeholder={placeholder}\r\n    onChange={handleChange}\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    //   onChange={(event) =>\r\n    //     this.setState({ searchField: event.target.value })\r\n    //   }\r\n    // This component was originally in App.js which is why it references this.setState\r\n    //this.setState calls the render() method, therefore you cannot use it in the render method outside of an event or it will cause an infinite loop\r\n    //  {\r\n    // this.setState({ searchField: event.target.value }, () =>\r\n    //   console.log(this.state.searchField)\r\n    // );\r\n    // because this.setState is an asynchronous (javascript doesn't know how long it'll take and it doesn't happen immediately) function, when we log this.state it is always a letter behind.\r\n    // console.log(this.state.searchField);\r\n    //To fix this we add a second argument to the this.setState method which is a callback function. this tells this.setState to set the state, and then when its done run this callback function\r\n    // }\r\n    // }\r\n  />\r\n);\r\n","import React, { Component } from \"react\";\nimport { CardList } from \"./Components/card-list/card-list.component\";\nimport { SearchBox } from \"./Components/search-box/search-box.component\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n\n    // //Here, because all of our \"this\"'s are in the constructor, it knows its refering to this App class\n    // this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => this.setState({ monsters: users }))\n      .catch((error) => console.log(error.message));\n  }\n\n  //Arrow function automatically bind \"this\" to the class it originated from preventing us from having to bind every class method. Use Arrow function on any class methods we define that aren't part of react like render() or componentDidMount().\n  handleChange = (event) => {\n    this.setState({ searchField: event.target.value });\n  };\n\n  // handleChange(event) {\n  //   // In an event, \"this\" is set to the element that caused it such as a button or an input field. Therefore, we need to bind this function in our constructor so it know \"this\" points to the App class\n  //   this.setState({ searchField: event.target.value });\n  // }\n\n  render() {\n    //filteredMonsters returns a new array of monsters based on if their name includes whats in this.state.searchField. We then pass the filteredMonsters array as props instead of the complete monsters array to the CardList componenet\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        {/* //props are whats passed into the component, placeholder monsters and handleChange in this case.\n        //props.children is whats passed in between the component like, <CardList>here is in between</CardList> */}\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder=\"Search Monster\"\n          handleChange={this.handleChange}\n          //dont call function for events, assign function to events. so this.handleChange() would call the function immediately, even when there is no onChange event where this method is used and be wrong\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}